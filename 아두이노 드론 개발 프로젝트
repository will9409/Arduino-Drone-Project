아두이노 드론 개발 프로젝트

프로젝트 기간 : 9.20~10.11
프로젝트 개발환경 : ubuntu Linux(Laptop), Arduino Sketch
프로젝트 개요
 - 시중에 판매되고 있는 AIR COPTER PLUS의 부품들을 따로 구매하여 추가적인 부품이나 필요한 센서들을 부착하여 사용하도록 함.
   이 제품을 직접 구매한 것은 아니기 때문에 내부 작동 코드는 직접 작성하기로 함.
프로젝트 개발에 사용된 주요 부품
  1. GY-521 (가속도 자이로 센서)
  2. GY-530 (레이저 거리 센서)
  3. ATmega32u4(Arduino Pro Micro)
  4. HM-10 Bluetooth 4.0 통신 모듈
프로젝트 개발에 사용했던 센서 필터링 기능(사용 순서)
  1. Complementary Filter(상보 필터)
  2. Digital Low Pass Filter(DLPF)
  2. Moving Average Filter(이동 평균 필터)
  3. Kalman Filter(칼만 필터)
  4. DMP(Digital Motion Processor)
프로젝트 참고자료
 - 책 : 아두이노 드론 만들고 날리고 직접 코딩하기
 - 구글링
 - 구글링을 대신 할 chatGPT

드론 스펙(AIR COPTER PLUS 몸체)

바디
모터: 820모터(정x2 , 역x2)
길이: 약 22.5cm(대각선 날개 제외)
날개길이 : 약 13.5cm
날개포함 총 길이 : 약 36cm

제어보드
사이즈 : 45mm x 45mm
축: 4축
On/Off 스위치

드론사양
무게: 약 100g
배터리: 3.7V / 500mA
조종시간: 5~7분
통신거리: 20m(개활지)


프로젝트 코멘트

 - 개발 흐름

드론 소스프로그램 작성을 시작하면서 기본적으로 책을 기반으로 프로젝트를 시작했습니다.
책에서 드론이 비행하는 방식과 대략적인 이론을 알려주고 예시 코드를 통해 드론이 수직으로 이륙하는 기능을 구현하는것은
많은 시간이 걸리지 않았습니다.
 수직으로 이륙하고 나서 공중에 호버링하고 비행을 하도록 만들고 싶다는 생각이 들었습니다.
그래서 별도의 조종 없이 제자리에서 공중에 머무를 수 있도록 자세 제어를 위한 방법을 찾아나가기 시작하였습니다.
그 결과 PID control 제어와 PID throttle 제어를 알게 되었고, 센서 데이터의 노이즈와 누적 발산에 대한 존재에 대해 알게 되었습니다.
PID값을 찾으려는 시간과 센서 데이터의 노이즈 감소에서 프로젝트의 대부분의 시간이 사용되었습니다.

 - 시행착오

1. PID값과 노이즈
처음엔 고정된 쓰로틀값을 시작으로 드론의 균형을 잡으면서 비행을 하게 하기 위해 PID값을 조정했습니다.
하지만 아무리 PID값들을 늘이고 줄이고 조정해봐도 공중에서 안정적으로 머무른건 단 1초 남짓의 시간 뿐이였습니다.
Euler Angle값이 단 1초도 안되어서 순식간에 발산하면서 드론이 자세제어가 불가능해지고 한 방향으로 흐르거나 흔들리게 됩니다.
이를 제어하기 위해 필터들을 찾아보기 시작했고, 가장 가볍다는 상보 필터부터 가장 무겁다는 칼만 필터까지 사용해보았습니다.
각각의 필터를 적용할 때는 나름의 적절한 세팅값들이 있었는데, 칼만 필터는 현재 드론의 상태에 걸맞는 세팅값을 찾았다고 생각한 순간에
기존의 상보필터와 동등하거나 이보다 떨어진 결과를 보였습니다. 아마도 코드가 잘못되었거나 오류 예측값에 대한 변화량을 잘 설정하지 못한 이유일 것입니다.
그러나 이 과정에서 MPU6050 센서에 대한 특성을 잘 알게 되었는데, 자이로 센서는 시간이 지날수록 센서값이 순식간에 불안정해지고,
가속도 센서는 시간이 지날수록 안정적이지만 초기에는 굉장히 불안정한 특성을 보인다는 것입니다.
MPU6050내부에 있는 자체 필터인 DLPF를 사용해서 센서의 반응속도를 댓가로 안정성을 찾아오는 기능을 사용해보았으나 이 또한 실질적 차이는 없었습니다.
그렇게 여러가지들을 시도하다가 MPU6050에서 제공하는 DMP라는 필터링 기능을 알게 되었는데, 그 어떤 필터도 보여주지 못한 Euler Angle값의 발산을 막아주고
드론이 정상상태에서 움직인 이후에 다시 정상상태로 돌아왔을때 이 값을 정상상태의 값으로 다시 유지시켜주는 모습을 보였습니다.
이 전까지는 MPU6050이 정말 안좋다는 생각을 했었는데, 저렴하지만 쓸만한 센서라는 사실을 알게 되었습니다.


2. 높이 계산과 가속도 센서, 그리고 배터리 용량에 따른 출력 변화
PID값을 잘 조정하기 위해서는 특정 높이를 기준으로 쓰로틀값을 변화시키면서 공중에 띄워놓아야 한다고 생각했습니다.
이에 따라 높이를 구하려고 방법을 모색해봤는데, 추가적인 센서 없이 가속도값만으로 높이를 알 수 있는지 찾아보다가 낸 결과로는
드론이 출력을 높이며 상승할 때 중력가속도를 이기고 올라가면서 가속도값이 출력될 때, 이 가속도값이 단순한 가속도가 아닌 각 가속도이기 때문에
순수하게 90도 상승하는 높이만으로의 가속도를 찾아내기 위해서는 각에 대한 값을 보정해서 높이를 계산하는 것이였습니다.
어느정도 맞겠다 싶은 이륙 거리 계산을 할 수 있게 되었지만, 드론이 배터리 용량에 따라 출력이 달라지고 가속도 값의 발산하는 특성으로 인해
정밀한 높이값을 찾아낼 수는 없었습니다. 이 또한 어느정도 compensate하기위해 EEPROM에 현재 배터리 용량과 모터 출력에 따른 소모 등을
대략적으로 계산한 값들을 배터리 교체시마다 초기화하면서 저장하게 하도록 만들어두고 쓰로틀값이 용량에따라 올라가게끔 해두었는데,
역시 추가적인 배터리 계산 모듈 없이는 정밀하지 못한 문제가 있었습니다.
이에 따라 새로운 센서인 GY-530 레이저 거리 센서를 추가하고 납땜하여 센서값을 가져와서 대략 1.5미터까지는 지상과의 거리를 계산할 수 있도록 하였습니다.


2. 현재 개발중인 드론의 물리적인 특성과 일반적인 이론과의 차이점
현재 드론의 모터 스펙은 Brush가 있는 모터이고, 작은 드론에 사용이 가능하지만 안정적인 출력을 내기 위해서는 ESC(Electronic Speed Control)장치의 도움이 필요하기 때문에
추가적인 세팅과 보드 자체의 전원 분배에도 영향을 끼치게 되어 개발에 한계를 맞이하게 됩니다.
또한 PID 세팅을 하면서 Brushless 모터에 비해 정밀한 출력제어가 되지 않아서 roll 한 축만을 제어하기위한 P값을 찾아내는 일만 해도 불가능한 처사였습니다. 출력이 정밀하지
못한 이유로 기울어진 드론이 균형을 잡기 위해 내는 출력이 이미 P값에 의한 오류의 발산으로 유도되는 현상의 값이 되는 것입니다.(Brushless 모터도 ESC가 없다면 정밀제어가 
안되는지에 대해서는 경험이 없어서 모르겠습니다)
기본적인 PID 제어 이론에서 설정하는 D값은 Euler Angle의 시간에 대한 변화량에 대해 코드를 설정하는 반면, 이 드론을 다루는 책에서는 자이로값에 대해 반대편에서 누르는값
으로 힘을 조정하게 되는 세팅을 하게 됩니다. 이러한 세팅은 높은 확률로 드론이 좌우로 흔들리거나 조금만 엇나가도 오류가 누적되어 발산하게 되는 것입니다.

3. 드론 자동 호버링 제어와 현실
머리속에서 그린 그림은 입력으로 높이값만 주어도 현재 높이와의 차이로 인해 출력을 조절하면서 특정 높이를 유지하고 PID 자세 제어를 통해 균형을 유지하면서 드론이 자동으로
호버링을 하게 되고 단순 제어를 통해 방향을 정해 비행하는 것이였는데, 자료를 더 찾아보고 AIR COPTER PLUS 시현을 본 결과 쓰로틀과 ypr을 사람이 직접 조정하면서 비행한다는
것을 알게 되었습니다. 정밀하게 ypr을 직접 제어하게끔 맞기는 것 보다 사람이 일정하게 오류를 보정하면서 제어하는 비행이 드론의 부족함을 채워주는 식의 구현도 충분히 있는 일이라는 것입니다.

프로젝트 결과

프로젝트의 결과로는 결국 드론의 정밀 자동제어 비행은 하드웨어적 한계로 실패하여 아쉽지만, 드론을 직접 구현해보고 날려보고 시행착오를 겪어보면서 드론을 구현해내는 방식
과 센서들에 대한 적절한 사용법들을 알게되었고, 직접 납땜하여 데이터들을 통신시키고 그 값들을 이용하여 물리적인 현실에 구현해 내는 것은 흥미로운 일이였습니다.
과거의 공부들은 이론적인 것들과 소프트웨어적인 것들이였다면, 물리적 세계와 컴퓨터 연산 결과에 대한 연결점을 직접 두 눈으로 보고 두 손으로 연결시켜본 경험은
색다른 경험이였습니다.
